(in-package :cl-cad)

(defun code-editor (parent-window)
  (within-main-loop
   (let* ((window (make-instance 'gtk-window 
				  :title "Make new file" 
				  :type :toplevel 
				  :window-position :center 
				  :default-width 450 
				  :default-height 260
				  :destroy-with-parent t
				  :transient-for parent-window))
	  (term-vbox (make-instance 'v-box))
	  (term-hbox (make-instance 'h-box))
	  (term-buffer (make-instance 'text-buffer))
	  (term-text-view (make-instance 'text-view :buffer term-buffer))
	  (term-new (make-instance 'button :image (make-instance 'image :stock "gtk-new")))
	  (term-open (make-instance 'button :image (make-instance 'image :stock "gtk-open")))
	  (term-save (make-instance 'button :image (make-instance 'image :stock "gtk-save")))
	  (term-save-as (make-instance 'button :image (make-instance 'image :stock "gtk-save-as")))
	  (term-eval (make-instance 'button :image (make-instance 'image :stock "gtk-execute")))
	  (term-scrolled (make-instance 'scrolled-window :hscrollbar-policy :automatic :vscrollbar-policy :automatic))
	  (term-file-name nil))
     (container-add window term-vbox)
     (box-pack-start term-vbox term-hbox :expand nil)
     (container-add term-vbox term-scrolled)
     (container-add term-scrolled term-text-view)
     (box-pack-start term-hbox term-new :expand nil)
     (box-pack-start term-hbox term-open :expand nil)
     (box-pack-start term-hbox term-save :expand nil)
     (box-pack-start term-hbox term-save-as :expand nil)
     (box-pack-start term-hbox term-eval :expand nil)
     (gobject:g-signal-connect window "destroy" 
			       (lambda (widget) 
				 (declare (ignore widget)) (leave-gtk-main)))
     (gobject:g-signal-connect term-new "clicked" (lambda (&rest args) 
						    (declare (ignore args)) 
						    (setf term-file-name nil
							  (text-buffer-text (text-view-buffer term-text-view)) "")))
     (gobject:g-signal-connect term-save "clicked" (lambda (&rest args) 
						     (declare (ignore args)) 
						     (setf term-file-name nil
							   (text-buffer-text (text-view-buffer term-text-view)) "")))
     (gobject:g-signal-connect term-save-as "clicked" (lambda (&rest args) 
							(declare (ignore args)) 
							(let ((d (make-instance 'file-chooser-dialog :action :save :title "Save file")))
							  (when term-file-name (setf (file-chooser-filename d) term-file-name))
							  (dialog-add-button d "gtk-save" :accept)
							  (dialog-add-button d "gtk-cancel" :cancel)
							  (if (eq :accept (dialog-run d))
							      (progn
								(setf term-file-name (file-chooser-filename d))
								(object-destroy d))
							      (object-destroy d)))))
     (gobject:g-signal-connect term-open "clicked" (lambda (&rest args) 
						     (declare (ignore args)) 
						     (let ((d (make-instance 'file-chooser-dialog :action :open :title "Open file")))
						       (when term-file-name (setf (file-chooser-filename d) term-file-name))
						       (dialog-add-button d "gtk-open" :accept)
						       (dialog-add-button d "gtk-cancel" :cancel)
						       (when (eq :accept (dialog-run d))
							 (setf term-file-name (file-chooser-filename d)
							       (text-buffer-text (text-view-buffer term-text-view)) (read-text-file term-file-name)))
						       (object-destroy d))))
     (gobject:g-signal-connect term-eval "clicked" (lambda (&rest args) 
						     (declare (ignore args)) 
						     (let ((buffer (text-view-buffer term-text-view)))
						       (multiple-value-bind (i1 i2) (text-buffer-get-selection-bounds buffer)
							 (when (and i1 i2)
							   (with-gtk-message-error-handler
							       (let* ((text (text-buffer-slice buffer i1 i2))
								      (value (eval (read-from-string text)))
								      (value-str (format nil "~A" value))
								      (pos (max (text-iter-offset i1) (text-iter-offset i2))))
								 (text-buffer-insert buffer " => " :position (text-buffer-get-iter-at-offset buffer pos))
								 (incf pos (length " => "))
								 (text-buffer-insert buffer value-str :position (text-buffer-get-iter-at-offset buffer pos)))))))))
     (widget-show window))))