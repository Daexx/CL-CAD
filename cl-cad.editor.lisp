(in-package :cl-cad)

(defun read-text-file (file-name)
  (with-output-to-string (str)
    (with-open-file (file file-name)
      (loop
         for line = (read-line file nil nil)
         while line
         do (fresh-line str)
         do (write-string line str)))))

(defun code-editor ()
  (within-main-loop
    (let* ((builder (let ((builder (make-instance 'builder)))
                      (builder-add-from-file builder (namestring (merge-pathnames "UI/text-editor.ui" *src-location*)))
                      builder))
           (window (builder-get-object builder "window1"))
           (text-view (builder-get-object builder "textview1"))
           (statusbar (builder-get-object builder "statusbar1"))
           (file-name nil)
           (modified-p t))
      (statusbar-push statusbar "filename" "Untitled *")
      (labels ((set-properties ()
                 (statusbar-pop statusbar "filename")
                 (statusbar-push statusbar "filename" (format nil "~A~:[~; *~]" (or file-name "Untitled") modified-p)))
               (new (&rest args) (declare (ignore args))
                    (setf file-name nil
                          modified-p t
                          (text-buffer-text (text-view-buffer text-view)) "")
                    (set-properties))
               (cb-open (&rest args) (declare (ignore args))
                        (let ((d (make-instance 'file-chooser-dialog :action :open :title "Open file")))
                          (when file-name (setf (file-chooser-filename d) file-name))
                          (dialog-add-button d "gtk-open" :accept)
                          (dialog-add-button d "gtk-cancel" :cancel)
                          (when (eq :accept (dialog-run d))
                            (setf file-name (file-chooser-filename d)
                                  (text-buffer-text (text-view-buffer text-view)) (read-text-file file-name)
                                  modified-p nil)
                            (set-properties))
                          (object-destroy d)))
               (save (&rest args) (declare (ignore args))
                     (if file-name
                         (progn
                           (with-open-file (file file-name :direction :output :if-exists :supersede)
                             (write-string (text-buffer-text (text-view-buffer text-view)) file))
                           (setf modified-p nil)
                           (set-properties))
                         (save-as)))
               (save-as (&rest args) (declare (ignore args))
                        (let ((d (make-instance 'file-chooser-dialog :action :save :title "Save file")))
                          (when file-name (setf (file-chooser-filename d) file-name))
                          (dialog-add-button d "gtk-save" :accept)
                          (dialog-add-button d "gtk-cancel" :cancel)
                          (if (eq :accept (dialog-run d))
                              (progn
                                (setf file-name (file-chooser-filename d))
                                (object-destroy d)
                                (save))
                              (object-destroy d))))
               (cut (&rest args) (declare (ignore args))
                    (text-buffer-cut-clipboard (text-view-buffer text-view) (get-clipboard "CLIPBOARD") t))
               (copy (&rest args) (declare (ignore args))
                     (text-buffer-copy-clipboard (text-view-buffer text-view) (get-clipboard "CLIPBOARD")))
               (paste (&rest args) (declare (ignore args))
                      (text-buffer-paste-clipboard (text-view-buffer text-view) (get-clipboard "CLIPBOARD")))
               (cb-delete (&rest args) (declare (ignore args))
                          (let ((buffer (text-view-buffer text-view)))
                            (multiple-value-bind (i1 i2) (text-buffer-get-selection-bounds buffer)
                              (when (and i1 i2)
                                (text-buffer-delete buffer i1 i2)))))
               (quit (&rest args) (declare (ignore args)) (object-destroy window))
               (cb-eval (&rest args) (declare (ignore args))
                        (let ((buffer (text-view-buffer text-view)))
                          (multiple-value-bind (i1 i2) (text-buffer-get-selection-bounds buffer)
                            (when (and i1 i2)
                              (with-gtk-message-error-handler
                                (let* ((text (text-buffer-slice buffer i1 i2))
                                       (value (eval (read-from-string text)))
                                       (value-str (format nil "~A" value))
                                       (pos (max (text-iter-offset i1) (text-iter-offset i2))))
                                  (text-buffer-insert buffer " => " :position (text-buffer-get-iter-at-offset buffer pos))
                                  (incf pos (length " => "))
                                  (text-buffer-insert buffer value-str :position (text-buffer-get-iter-at-offset buffer pos)))))))))
        (builder-connect-signals-simple builder `(("new" ,#'new)
                                                  ("open" ,#'cb-open)
                                                  ("save" ,#'save)
                                                  ("save-as" ,#'save-as)
                                                  ("cut" ,#'cut)
                                                  ("copy" ,#'copy)
                                                  ("paste" ,#'paste)
                                                  ("delete" ,#'cb-delete)
                                                  ("quit" ,#'quit)
                                                  ("eval" ,#'cb-eval)))
        (connect-signal window "destroy" (lambda (w) (declare (ignore w)) (leave-gtk-main)))
        (connect-signal (text-view-buffer text-view) "changed" (lambda (b) (declare (ignore b)) (setf modified-p t) (set-properties)))
        (widget-show window)))))