(in-package :cl-cad)

(defun layers-window (parent-window)
  (within-main-loop
    (let* ((window (make-instance 'gtk-window 
				  :type :toplevel 
				  :title "Layers" 
				  :destroy-with-parent t
				  :transient-for parent-window))
           (model (make-instance 'array-list-store))
           (scroll (make-instance 'scrolled-window 
				  :hscrollbar-policy :automatic 
				  :vscrollbar-policy :automatic))
           (tv (make-instance 'tree-view 
			      :headers-visible t 
			      :width-request 100 
			      :height-request 300 
			      :rules-hint t))
           (h-box (make-instance 'h-box))
           (v-box (make-instance 'v-box))
           (layer-name-entry (make-instance 'entry))
           (line-type-entry (make-instance 'entry))
	   (color-line-entry (make-instance 'entry))
	   (weight-entry (make-instance 'entry))
	   (printable-button (make-instance 'check-button :label "Print"))
	   (view-button (make-instance 'check-button :label "View"))
           (button (make-instance 'button :label "Add layer")))
      (store-add-column model "gchararray" :layer-name)
      (store-add-column model "gchararray" :line-type)
      (store-add-column model "gchararray" :color-line)
      (store-add-column model "gint" :weight)
      (store-add-column model "gchararray" :printable)
      (store-add-column model "gchararray" :view)
  ;    (store-add-item model (add-layer 
      (setf (tree-view-model tv) model (tree-view-tooltip-column tv) 0)
      (gobject:g-signal-connect window "destroy" (lambda (w) 
						   (declare (ignore w)) (leave-gtk-main)))
  ;    (gobject:g-signal-connect button "clicked" (lambda (b)
   ;                                                (declare (ignore b))
    ;                                               (store-add-item model (add-layer :layer-name (entry-text layer-name-entry)
;										     :line-type (entry-text line-type-entry)
;										     :color-line (entry-text color-line-entry)
;										     :weight (or (parse-integer (entry-text weight-entry) 
 ;                                                                                                            :junk-allowed t)
  ;                                                                                            0)
;										    :printable (or (entry-text printable-entry) "yes")
;										    :view (or (entry-text view-entry) "yes")))))
   ;   (gobject:g-signal-connect tv "row-activated" (lambda (tv path column)
;						     (declare (ignore tv column))
;						     (format t "You clicked on row ~A~%" (tree-path-indices path))))
      (container-add window v-box)
      (box-pack-start v-box h-box :expand nil)
      (box-pack-start h-box layer-name-entry :expand nil)
      (box-pack-start h-box line-type-entry :expand nil)
      (box-pack-start h-box color-line-entry :expand nil)
      (box-pack-start h-box weight-entry :expand nil)
      (box-pack-start h-box printable-button :expand nil)
      (box-pack-start h-box view-button :expand nil)
      (box-pack-start h-box button :expand nil)
      (box-pack-start v-box scroll)
      (container-add scroll tv)
      (let ((column (make-instance 'tree-view-column :title "Name" :sort-column-id 0))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 0)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "Line type"))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 1)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "Color line"))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 2)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "Weight"))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 3)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "Printable"))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 4)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "View"))
            (renderer (make-instance 'cell-renderer-toggle :activatable t)))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 5)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (widget-show window))))