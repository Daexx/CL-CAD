(in-package :cl-cad)

(defstruct layer layer-name line-type color-line width printable view)

(defun layers-window ()
  (within-main-loop
    (let* ((window (make-instance 'gtk-window 
				  :type :toplevel 
				  :title "Layers"
				  :window-position :center
				  :default-width 500 
				  :default-height 300))
           (model (make-instance 'array-list-store))
           (scroll (make-instance 'scrolled-window 
				  :hscrollbar-policy :automatic 
				  :vscrollbar-policy :automatic))
           (tv (make-instance 'tree-view 
			      :headers-visible t 
			      :width-request 100 
			      :height-request 300 
			      :rules-hint t))
           (h-box (make-instance 'h-box))
           (v-box (make-instance 'v-box))
           (add-layer-button (make-instance 'button :label "Add layer"))
	   (remove-layer-button (make-instance 'button :label "Remove layer"))
	   (close-button (make-instance 'button :label "Close")))
      (store-add-column model "gchararray" #'layer-layer-name)
      (store-add-column model "gchararray" #'layer-line-type)
      (store-add-column model "gchararray" #'layer-color-line)
      (store-add-column model "gint" #'layer-width)
      (store-add-column model "gchararray" #'layer-printable)
      (store-add-column model "gchararray" #'layer-view)

      (dolist (cd *current-draw*)
	(if (equal (getf cd :title) :layer)
	    (store-add-item model (make-layer :layer-name (getf cd :layer-name)
					      :line-type (getf cd :line-type)
					      :color-line (getf cd :color-line)
					      :width (getf cd :width)
					      :printable (getf cd :printable)
					      :view (getf cd :view)))))

      (setf (tree-view-model tv) model (tree-view-tooltip-column tv) 0)
      (gobject:g-signal-connect window "destroy" (lambda (w) 
						   (declare (ignore w)) (leave-gtk-main)))
      (gobject:g-signal-connect window "configure-event" (lambda (widget event)
							     (declare (ignore widget event))
							     (widget-queue-draw window)))
      (gobject:g-signal-connect close-button "clicked" (lambda (b)
                                                   (declare (ignore b)) (object-destroy window)))
      (gobject:g-signal-connect add-layer-button "clicked" (lambda (b)
                                                   (declare (ignore b))
						   (object-destroy window)
						   (add-layer-window)))
      (container-add window h-box)
      (box-pack-start h-box scroll)
      (box-pack-start h-box v-box :expand nil)
      (box-pack-start v-box add-layer-button :expand nil)
      (box-pack-start v-box remove-layer-button :expand nil)
      (box-pack-start v-box close-button :expand nil)
      (container-add scroll tv)
      (let ((column (make-instance 'tree-view-column :title "Name" :sort-column-id 0))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 0)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "Line type"))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 1)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "Color line"))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 2)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "Weight"))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 3)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "Printable"))
            (renderer (make-instance 'cell-renderer-toggle :activatable t)))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 4)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "View"))
            (renderer (make-instance 'cell-renderer-toggle :activatable t)))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 5)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (widget-show window))))

(defun add-layer-window ()
  (within-main-loop
    (let* ((window (make-instance 'gtk-window 
				  :type :toplevel
				  :window-position :center
				  :title "Add layer"))
	   (v-box (make-instance 'v-box))
	   (layer-name-entry (make-instance 'entry))
           (line-type-entry (make-instance 'entry))
	   (color-line-entry (make-instance 'entry))
	   (weight-entry (make-instance 'entry))
	   (printable-button (make-instance 'check-button :label "Print"))
	   (view-button (make-instance 'check-button :label "View"))
	   (button (make-instance 'button :label "Add layer")))
      (gobject:g-signal-connect window "destroy" (lambda (w) 
						   (declare (ignore w)) (leave-gtk-main)))
      (gobject:g-signal-connect button "clicked" (lambda (b)
                                                   (declare (ignore b))
                                                   (add-layer (entry-text layer-name-entry)
							      (entry-text line-type-entry)
							      (entry-text color-line-entry)
							      (or (parse-integer (entry-text weight-entry) 
										 :junk-allowed t)
								  0)
							      "yes"
							      "yes")
						   (object-destroy window)
						   (layers-window)))
      (container-add window v-box)
      (box-pack-start v-box layer-name-entry :expand nil)
      (box-pack-start v-box line-type-entry :expand nil)
      (box-pack-start v-box color-line-entry :expand nil)
      (box-pack-start v-box weight-entry :expand nil)
      (box-pack-start v-box printable-button :expand nil)
      (box-pack-start v-box view-button :expand nil)
      (box-pack-start v-box button :expand nil)
      (widget-show window))))