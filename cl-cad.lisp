(defpackage #:cl-cad
  (:shadowing-import-from #:cl-cairo2 #:scale)
  (:use :cl #:gtk #:cl-cairo2 #:cl-gtk2-cairo)
  (:export #:main-window :run))

(in-package #:cl-cad)

(defvar *current-draw* nil)
(defvar *selection* nil)

(defun make-draw-current (draw)
  (setf *current-draw* draw))

;(defun add-file-properties (file-name subject author keywords comments hyperlink created modified)
;  (push (list :title "file-properties" :file-name file-name :subject subject :author author :keywords keywords :comments comments :hyperlink hyperlink :created created :modified modified) *current-draw*))

;(defun add-sheet-properties (format hpole vpole background-color metrics space)
;  (push (list :title "sheet-properties" :format format :hpole hpole :vpole vpole :background-color background-color :metrics metrics :space space) *current-draw*))

;(defun add-layer (layer-name line-type color-line weight printable view)
;  (push (list :title "layer" :layer-name layer-name :line-type line-type :color-line color-line :weight weight :printable printable :view view) *current-draw*))

;(defun add-line (layer x1 y1 z1 x2 y2 z2 line-type zoom-line color-line weight)
;  (push (list :title "line" :layer layer :x1 x1 :y1 y1 :z1 z1 :x2 x2 :y2 y2 :z2 z2 :line-type line-type :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

;(defun add-circle (layer x1 y1 z1 radius line-type zoom-line color-line weight)
;  (push (list :title "circle" :layer layer :x1 x1 :y1 y1 :z1 z1 :radius radius :line-type line-type :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

;(defun add-arc (layer x1 y1 z1 radius startangle endangle line-type zoom-line color-line weight)
;  (push (list :title "arc" :layer layer :x1 x1 :y1 y1 :z1 z1 :radius radius :startangle startangle :endangle endangle :line-type line-type :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

;(defun add-continious (layer x1 y1 z1 x2 y2 z2 line-type zoom-line color-line weight)
;  (push (list :title "continious" :layer layer :x1 x1 :y1 y1 :z1 z1 :x2 x2 :y2 y2 :z2 z2 :line-type line-type :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

;(defun add-ray (layer x1 y1 z1 x2 y2 z2 line-type zoom-line color-line weight)
;  (push (list :title "ray" :layer layer :x1 x1 :y1 y1 :z1 z1 :x2 x2 :y2 y2 :z2 z2 :line-type line-type :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

;(defun add-text (layer x1 y1 z1 count style annotate alignment height angle compression mirror mirror-left line-type zoom-line color-line weight)
;  (push (list :title "text" :layer layer :x1 x1 :y1 y1 :z1 z1 :count count :style style :annotate annotate :alignment alignment :height height :angle angle :compression compression :mirror mirror :mirror-left mirror-left :line-type line-type :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

;(defun add-mtext (layer x1 y1 z1 count style annotate alignment height angle interval zoom-line color-line weight)
;  (push (list :title "mtext" :layer layer :x1 x1 :y1 y1 :z1 z1 :count count :style style :annotate annotate :alignment alignment :height height :angle angle :interval interval :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

;(defun add-block (layer name-block x1 y1 z1 xscale yscale zscale count rotation)
;  (push (list :title "block" :layer layer :name-block name-block :x1 x1 :y1 y1 :z1 z1 :xscale xscale :yscale yscale :zscale zscale :count count :rotation rotation) *current-draw*))

;(defun add-point (layer x1 y1 z1 color-line style)
;  (push (list :title "point" :layer layer :x1 x1 :y1 y1 :z1 z1 :color-line color-line :style style) *current-draw*))

;(defun add-ellipse (layer x1 y1 z1 major-radius minor-radius radius-ratio start-angle end-angle color-line weight)
;  (push (list :title "ellipse" :layer layer :x1 x1 :y1 y1 :z1 z1 :major-radius major-radius :minor-radius minor-radius :radius-ratio radius-ratio :start-angle start-angle :end-angle end-angle :color-line color-line :weight weight) *current-draw*))

;(defun add-raster-image (layer x1 y1 z1 rotation-angle width height scale brightness contrast fade path show-image show-clipped transparency)
;  (push (list :title "raster-image" :layer layer :x1 x1 :y1 y1 :z1 z1 :rotation-angle rotation-angle :width width :height height :scale scale :brightness brightness :contrast contrast :fade fade :path path :show-image show-image :show-clipped show-clipped :transparency transparency) *current-draw*))

(defstruct file-properties file-name subject author keywords comments hyperlink created modified)
(defstruct sheet-properties format hpole vpole background-color units space)
(defstruct layer layer-name line-type color-line weight printable view)
(defstruct line layer x1 y1 z1 x2 y2 z2 line-type zoom-line color-line weight)
(defstruct circle layer x1 y1 z1 radius line-type zoom-line color-line weight)
(defstruct arc layer x1 y1 z1 radius startangle endangle line-type zoom-line color-line weight)
(defstruct continious layer x1 y1 z1 x2 y2 z2 line-type zoom-line color-line weight)
(defstruct ray layer x1 y1 z1 x2 y2 z2 line-type zoom-line color-line weight)
(defstruct text layer x1 y1 z1 count style annotate alignment height angle compression mirror mirror-left line-type zoom-line color-line weight)
(defstruct mtext layer x1 y1 z1 count style annotate alignment height angle interval zoom-line color-line weight)
(defstruct brick layer name-block x1 y1 z1 xscale yscale zscale count rotation)
(defstruct point layer x1 y1 z1 color-line style)
(defstruct ellipse layer x1 y1 z1 major-radius minor-radius radius-ratio start-angle end-angle color-line weight)
(defstruct raster-image layer x1 y1 z1 rotation-angle width height scale brightness contrast fade path show-image show-clipped transparency)

(defun add-sheet-properties (format hpole vpole background-color units space)
  (push (make-sheet-properties :format format :hpole hpole :vpole vpole :background-color background-color :units units :space space) *current-draw*))

(defun add-layer (layer-name line-type color-line weight printable view)
  (push (make-layer :layer-name layer-name :line-type line-type :color-line color-line :weight weight :printable printable :view view) *current-draw*))

(defun add-line (layer x1 y1 z1 x2 y2 z2 line-type zoom-line color-line weight)
  (push (make-line :layer layer :x1 x1 :y1 y1 :z1 z1 :x2 x2 :y2 y2 :z2 z2 :line-type line-type :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

(defun add-circle (layer x1 y1 z1 radius line-type zoom-line color-line weight)
  (push (make-circle :layer layer :x1 x1 :y1 y1 :z1 z1 :radius radius :line-type line-type :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

(defun add-arc (layer x1 y1 z1 radius startangle endangle line-type zoom-line color-line weight)
  (push (make-arc :layer layer :x1 x1 :y1 y1 :z1 z1 :radius radius :startangle startangle :endangle endangle :line-type line-type :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

(defun add-continious (layer x1 y1 z1 x2 y2 z2 line-type zoom-line color-line weight)
  (push (make-continious :layer layer :x1 x1 :y1 y1 :z1 z1 :x2 x2 :y2 y2 :z2 z2 :line-type line-type :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

(defun add-ray (layer x1 y1 z1 x2 y2 z2 line-type zoom-line color-line weight)
  (push (make-ray :layer layer :x1 x1 :y1 y1 :z1 z1 :x2 x2 :y2 y2 :z2 z2 :line-type line-type :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

(defun add-text (layer x1 y1 z1 count style annotate alignment height angle compression mirror mirror-left line-type zoom-line color-line weight)
  (push (make-text :layer layer :x1 x1 :y1 y1 :z1 z1 :count count :style style :annotate annotate :alignment alignment :height height :angle angle :compression compression :mirror mirror :mirror-left mirror-left :line-type line-type :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

(defun add-mtext (layer x1 y1 z1 count style annotate alignment height angle interval zoom-line color-line weight)
  (push (make-mtext :layer layer :x1 x1 :y1 y1 :z1 z1 :count count :style style :annotate annotate :alignment alignment :height height :angle angle :interval interval :zoom-line zoom-line :color-line color-line :weight weight) *current-draw*))

(defun add-block (layer name-block x1 y1 z1 xscale yscale zscale count rotation)
  (push (make-brick :layer layer :name-block name-block :x1 x1 :y1 y1 :z1 z1 :xscale xscale :yscale yscale :zscale zscale :count count :rotation rotation) *current-draw*))

(defun add-point (layer x1 y1 z1 color-line)
  (push (make-point :layer layer :x1 x1 :y1 y1 :z1 z1 :color-line color-line) *current-draw*))

(defun add-ellipse (x1 y1 z1 major-radius minor-radius radius-ratio start-angle end-angle color-line weight)
  (push (make-layer :x1 x1 :y1 y1 :z1 z1 :major-radius major-radius :minor-radius minor-radius :radius-ratio radius-ratio :start-angle start-angle :end-angle end-angle :color-line color-line :weight weight) *current-draw*))

(defun add-raster-image (layer x1 y1 z1 rotation-angle width height scale brightness contrast fade path show-image show-clipped transparency)
  (push (make-raster-image :layer layer :x1 x1 :y1 y1 :z1 z1 :rotation-angle rotation-angle :width width :height height :scale scale :brightness brightness :contrast contrast :fade fade :path path :show-image show-image :show-clipped show-clipped :transparency transparency) *current-draw*))

;(defclass file-properties ()
;  ((file-name :initarg :file-name)
;   (subject :initarg :subject)
;   (author :initarg :author)
;   (keywords :initarg :keywords)
;   (comments :initarg :hyperlink)
;   (created :initarg :modified)
;   (modified :initarg :modified)))

;(defclass sheet-properties ()
;  ((format :initarg :format)
;   (hpole :initarg :hpole)
;   (background-color :initarg :background-color)
;   (units :initarg :units)
;   (space :initarg :space)))

;(defclass layer ()
;  ((layer-name :initarg :layer-name)
;   (line-type :initarg :line-type)
;   (color-line :initarg :color-line)
;   (weight :initarg :weight)
;   (printable :initarg :printable)
;   (view :initarg :view)))

;(defclass line ()
;   ((layer :initarg :layer)
;    (x1 :initarg :x1)
;    (y1 :initarg :y1)
;    (z1 :initarg :z1)
;    (x2 :initarg :x2)
;    (y2 :initarg :y2)
;    (z2 :initarg :z2)
;    (line-type :initarg :line-type)
;    (zoom-line :initarg :zoom-line)
;    (color-line :initarg :color-line)
;    (weight :initarg :weight)))

;(defclass circle ()
;   ((layer :initarg :layer)
;    (x1 :initarg :x1)
;    (y1 :initarg :y1)
;    (z1 :initarg :z1)
;    (radius :initarg :radius)
;    (line-type :initarg :line-type)
;    (zoom-line :initarg :zoom-line)
;    (color-line :initarg :color-line)
;    (weight :initarg :weight)))

;(defclass arc ()
;   ((layer :initarg :layer)
;    (x1 :initarg :x1)
;    (y1 :initarg :y1)
;    (z1 :initarg :z1)
;    (radius :initarg :radius)
;    (startangle :initarg :startangle)
;    (endangle :initarg :endangle)
;    (line-type :initarg :line-type)
;    (zoom-line :initarg :zoom-line)
;    (color-line :initarg :color-line)
;    (weight :initarg :weight)))

;(defclass continious ()
;   ((layer :initarg :layer)
;    (x1 :initarg :x1)
;    (y1 :initarg :y1)
;    (z1 :initarg :z1)
;    (x2 :initarg :x2)
;    (y2 :initarg :y2)
;    (z2 :initarg :z2)
;    (line-type :initarg :line-type)
;    (zoom-line :initarg :zoom-line)
;    (color-line :initarg :color-line)
;    (weight :initarg :weight)))

;(defclass ray ()
;   ((layer :initarg :layer)
;    (x1 :initarg :x1)
;    (y1 :initarg :y1)
;    (z1 :initarg :z1)
;    (x2 :initarg :x2)
;    (y2 :initarg :y2)
;    (z2 :initarg :z2)
;    (line-type :initarg :line-type)
;    (zoom-line :initarg :zoom-line)
;    (color-line :initarg :color-line)
;    (weight :initarg :weight)))

;(defclass text ()
;  ((layer :initarg :layer)
;   (x1 :initarg :x1)
;   (y1 :initarg :y1)
;   (z1 :initarg :z1)
;   (count :initarg :count)
;   (style :initarg :style)
;   (annotate :initarg :annotate)
;   (alignment :initarg :alignment)
;   (height :initarg :height)
;   (angle :initarg :angle)
;   (compression :initarg :compression)
;   (mirror :initarg :mirror)
;   (mirror-left :initarg :mirror-left)))

;(defclass mtext ()
;  ((layer :initarg :layer)
;   (x1 :initarg :x1)
;   (y1 :initarg :y1)
;   (z1 :initarg :z1)
;   (count :initarg :count)
;   (style :initarg :style)
;   (annotate :initarg :annotate)
;   (alignment :initarg :alignment)
;   (height :initarg :height)
;   (angle :initarg :angle)
;   (interval :initarg :interval)))

;(defclass block ()
;  ((layer :initarg :layer)
;   (block-name :initarg :block-name)
;   (x1 :initarg :x1)
;   (y1 :initarg :y1)
;   (z1 :initarg :z1)
;   (xscale :initarg :xscale)
;   (yscale :initarg :yscale)
;   (zscale :initarg :zscale)
;   (count :initarg :count)
;   (rotation :initarg :rotation)))

;(defclass point ()
;  ((layer :initarg :layer)
;   (x1 :initarg :x1)
;   (y1 :initarg :y1)
;   (z1 :initarg :z1)
;   (color-line :initarg :color-line)
;   (style :initarg :style)))

;(defclass ellipse ()
;  ((layer :initarg :layer)
;   (x1 :initarg :x1)
;   (y1 :initarg :y1)
;   (z1 :initarg :z1)
;   (major-radius :initarg :major-radius)
;   (minor-radius :initarg :minor-radius)
;   (startangle :initarg :startangle)
;   (endangle :initarg :endangle)
;   (radius-ratio :initarg :radius-ratio)
;   (line-type :initarg :line-type)
;   (zoom-line :initarg :zoom-line)
;   (color-line :initarg :color-line)
;   (weight :initarg :weight)))

;(defstruct raster-image ()
;	   ((layer :initarg :layer)
;	    (x1 :initarg :x1)
;	    (y1 :initarg :y1)
;	    (z1 :initarg :z1)
;	    (rotation-angle :initarg :rotation-angle)
;	    (width :initarg :width)
;	    (height :initarg :height)
;	    (scale :initarg :scale)
;	    (brightness :initarg :brightness)
;	    (contrast :initarg :contrast)
;	    (fade :initarg :fade)
;	    (path :initarg :path)
;	    (show-image :initarg :show-image)
;	    (show-clipped :initarg :show-clipped)
;	    (transparency :initarg :transparency)))

(defun save-draw (filename)
	(with-open-file (out filename :direction :output :if-exists :supersede)
	(with-standard-io-syntax
		(print *current-draw* out))))

(defun open-draw (filename)
	(with-open-file (in filename)
	(with-standard-io-syntax
		(setf *current-draw* (read in)))))

(defun prompt-read (prompt)
	(format *query-io* "~a: " prompt)
	(force-output *query-io*)
	(read-line *query-io*))
	
(defun select (selector-fn)
  (remove-if-not selector-fn *current-draw*))

(defun delete-primitive (selector-fn)
  (setf *current-draw* (remove-if selector-fn *current-draw*)))

(defun make-comparisons-list (fields)
  (loop while fields
     collecting (make-comparison-expr (pop fields) (pop fields))))

(defun make-comparison-expr (field value)
  `(equal (getf cd ,field) ,value))

(defmacro where (&rest clauses)
  `#'(lambda (cd) (and ,@(make-comparisons-list clauses))))

(defun update (selector-fn &key title layer x1 y1 z1 x2 y2 z2 line-type zoom-line color-line weight style)
           (setf *current-draw*
               (mapcar
                #'(lambda (row)
                    (when (funcall selector-fn row)
                      (if title (setf (getf row :title) title))
                      (if layer (setf (getf row :layer) layer))
                      (if x1 (setf (getf row :x1) x1))
                      (if y1 (setf (getf row :y1) y1))
                      (if z1 (setf (getf row :z1) z1))
                      (if x2 (setf (getf row :x2) x2))
                      (if y2 (setf (getf row :y2) y2))
                      (if z2 (setf (getf row :z2) z2))
                      (if line-type (setf (getf row :line-type) line-type))
                      (if zoom-line (setf (getf row :zoom-line) zoom-line))
                      (if color-line (setf (getf row :color-line) color-line))
                      (if weight (setf (getf row :weight) weight))
                      (if style (setf (getf row :style) style)))
                row) *current-draw*)))

(defun update-properties (selector-fn &key file-name subject author keywords comments hyperlink created modified format hpole vpole background-color metrics space)
           (setf *current-draw*
               (mapcar
                #'(lambda (row)
                    (when (funcall selector-fn row)
                      (if file-name (setf (getf row :file-name) file-name))
                      (if subject (setf (getf row :subject) subject))
                      (if author (setf (getf row :author) author))
                      (if keywords (setf (getf row :keywords) keywords))
                      (if comments (setf (getf row :comments) comments))
                      (if hyperlink (setf (getf row :hyperlink) hyperlink))
                      (if created (setf (getf row :created) created))
                      (if modified (setf (getf row :modified) modified))
                      (if format (setf (getf row :format) format))
                      (if hpole (setf (getf row :hpole) hpole))
                      (if vpole (setf (getf row :vpole) vpole))
                      (if background-color (setf (getf row :background-color) background-color))
                      (if metrics (setf (getf row :metrics) metrics))
                      (if space (setf (getf row :space) space)))
                row) *current-draw*)))
;sample
;(update (where :title "title") :x1 1

(defun parser ()
   (dolist (cd *current-draw*)
     (cond 
       ((equal (getf cd :title) "line") (lambda ()
					  (move-to (getf cd :x1) (getf cd :y1))
					  (line-to (getf cd :x2) (getf cd :y2))
					  (set-source-rgb 0 0 1)
					  (set-line-width (getf cd :weight))
					  (stroke)))
       ((equal (getf cd :title) "circle") (lambda ()
					    (arc (getf cd :x1) (getf cd :y1) (getf cd :radius) 0 (* 2 pi))
					    (set-source-rgb 0 0 1)
					    (set-line-width (getf cd :weight))
					    (stroke)))
       ((equal (getf cd :title) "arc") (lambda ()
					 (arc (getf cd :x1) (getf cd :y1) (getf cd :radius)  (deg-to-rad (getf cd :startangle)) (deg-to-rad (getf cd :endangle)))
					 (set-source-rgb 0 0 1)
					 (set-line-width (getf cd :weight))
					 (stroke)))
  ;     ((equal (getf cd :title) "continious") (lambda () (too-long-form)))
  ;     ((equal (getf cd :title) "ray") (lambda () (too-long-form)))
  ;     ((equal (getf cd :title) "text") (lambda () (too-long-form)))
  ;     ((equal (getf cd :title) "mtext") (lambda () (too-long-form)))
  ;     ((equal (getf cd :title) "block") (lambda () (too-long-form)))
       ((equal (getf cd :title) "point") (lambda ()
					   (move-to (getf cd :x1) (getf cd :y1))
					   (line-to (getf cd :x1) (getf cd :y1))
					   (set-source-rgb 0 0 1)
					   (set-line-width 1)
					   (stroke)))
  ;     ((equal (getf cd :title) "ellipse") (lambda () (too-long-form)))
   ;    ((equal (getf cd :title) "raster-image") (lambda () (too-long-form)))
       )))

(defun read-text-file (file-name)
  (with-output-to-string (str)
    (with-open-file (file file-name)
      (loop
         for line = (read-line file nil nil)
         while line
         do (fresh-line str)
         do (write-string line str)))))

(defgeneric draw-object (object))

(defun get-point-coordinates ()
  (if (<= (get-delta) *osnap-area-delta*)
      ;получение координат от привязки
      (get-snap-coordinates)
      ;получение координат от курсора
      (setf *x* x2
	    *y* y2)))

(defgeneric snap (osnap))

(defun get-snap-coordinates ()
  (min (cond
	 ((equal *osnap-center* t) (lambda () ))
	 ((equal *osnap-end* t) (lambda ()))
	 ((equal *osnap-insert* t) (lambda ()))
	 ((equal *osnap-intersection* t) (lambda ()))
	 ((equal *osnap-midpoint* t) (lambda ()))
	 ((equal *osnap-nearest* t) (lambda ()))
	 ((equal *osnap-point* t) (lambda ()))
	 ((equal *osnap-perpendicular* t) (lambda ()))
	 ((equal *osnap-quadrant* t) (lambda ()))
	 ((equal *osnap-tangent* t) (lambda ()))
	 ((equal *osnap-track* t) (lambda ()))
	 ((equal *osnap-grid* t) (lambda ()))
	 ((equal *osnap-ortho* t) (lambda ())))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;PARAMETERS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defparameter *src-location* (asdf:component-pathname (asdf:find-system :cl-cad)))
(defparameter *default-format* "A4")
(defparameter *default-space* "2d")
(defparameter *default-units* "Millimeters")
(defparameter *color-current-layer* nil)
(defparameter *default-line-width* 1)
(defparameter *default-font-size* 12)
(defvar *text-buffer-count*)
(defparameter *week-day-names*
  '("Monday" "Tuesday" "Wednesday"
    "Fhursday" "Friday" "Saturday" "Sunday"))
(defvar *current-screen* nil)
;osnaps
(defvar *x* nil)
(defvar *y* nil)
(defparameter *osnap-area-delta* 10)
(defparameter *osnap-center* nil)
(defparameter *osnap-end* t)
(defparameter *osnap-insert* nil)
(defparameter *osnap-intersection* t)
(defparameter *osnap-midpoint* nil)
(defparameter *osnap-nearest* nil)
(defparameter *osnap-point* nil)
(defparameter *osnap-perpendicular* nil)
(defparameter *osnap-quadrant* nil)
(defparameter *osnap-tangent* nil)
(defparameter *osnap-track* nil)
(defparameter *osnap-grid* nil)
(defparameter *osnap-ortho* nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;BEGIN USER INTERFACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;coming-soon-window
(defun coming-soon-window ()
  (within-main-loop
    (let ((window (make-instance 'gtk-window :title "Oops" :type :toplevel :window-position :center :default-width 170 :default-height 40 :destroy-with-parent t))
	  (label (make-instance 'label :label "Coming Soon =)")))
      (gobject:g-signal-connect window "destroy" (lambda (widget) (declare (ignore widget)) (leave-gtk-main)))
      (container-add window label)
      (widget-show window))))

;TODO print window
;(defun print-properties-window ()
;  (within-main-loop
;   (let* ((window (make-instance 'gtk:gtk-window
;                                 :type :toplevel
;                                 :window-position :center
;                                 :title "Print properties"
;                                 :default-width 800
;                                 :default-height 600))

(defun get-clear-time ()
  (multiple-value-bind
	(second minute hour date month year day-of-week dst-p tz)
      (get-decoded-time)
    (format nil "~2,'0d:~2,'od:~2,'0d, ~a, ~d/~2,'0d/~d (GMT~@d)"
	    hour
	    minute
	    second
	    (nth day-of-week *week-day-names*)
	    date
	    month
	    year
	    (- tz))))

;file properties
(defun file-properties-window ()
  (within-main-loop
   (let-ui
        (gtk-window
         :var w
         :type :toplevel
         :window-position :center
         :title "File properties"
         :default-width 450
         :default-height 256
         :border-width 5
	 :destroy-with-parent t
         (v-box
          (table
           :n-rows 8
           :n-columns 2
           :homogeneous nil
           (label :label "Filename") :left 0 :right 1 :top 0 :bottom 1
           (entry :var file-entry) :left 1 :right 2 :top 0 :bottom 1
           (label :label "Subject") :left 0 :right 1 :top 1 :bottom 2
           (entry :var subject-entry) :left 1 :right 2 :top 1 :bottom 2
           (label :label "Author") :left 0 :right 1 :top 2 :bottom 3
           (entry :var author-entry) :left 1 :right 2 :top 2 :bottom 3
           (label :label "Keywords") :left 0 :right 1 :top 3 :bottom 4
           (entry :var keywords-entry) :left 1 :right 2 :top 3 :bottom 4
           (label :label "Comments") :left 0 :right 1 :top 4 :bottom 5
           (entry :var comments-entry) :left 1 :right 2 :top 4 :bottom 5
           (label :label "Hyperlink") :left 0 :right 1 :top 5 :bottom 6
           (entry :var hyperlink-entry) :left 1 :right 2 :top 5 :bottom 6)
          (h-box
           (button :label "gtk-ok" :use-stock t :var button-ok) :expand nil :pack-type :end
           (button :label "gtk-cancel" :use-stock t :var button-cancel) :expand nil :pack-type :end) :expand nil))
     (gobject:g-signal-connect w "destroy" (lambda (widget) (declare (ignore widget)) (leave-gtk-main)))
     (gobject:g-signal-connect button-cancel "clicked" (lambda (b) (declare (ignore b)) (object-destroy w)))
     (gobject:g-signal-connect button-ok "clicked" (lambda (b)
						     (declare (ignore b))
						     (push (make-file-properties :file-name (or (entry-text file-entry) nil)
										 :subject (or (entry-text subject-entry) nil)
										 :author (or (entry-text author-entry) nil)
										 :keywords (or (entry-text keywords-entry) nil)
										 :comments (or (entry-text comments-entry) nil)
										 :hyperlink (or (entry-text hyperlink-entry) nil)
										 :created (get-clear-time)
										 :modified nil) *current-draw*)
						     (object-destroy w)))
     (widget-show w))))

;make-new-file window
(defun make-new-file-window ()
  (within-main-loop
    (let* ((window (make-instance 'gtk-window :title "Make new file" :type :toplevel :window-position :center :default-width 450 :default-height 260 :destroy-with-parent t))
	   (v-box (make-instance 'v-box))
	   (h-box (make-instance 'h-box))
	   (notebook (make-instance 'notebook :enable-popup t))
	   (new-vbox (make-instance 'v-box))
	   (detal-button (make-instance 'radio-button :label "Detal"))
	   (collect-button (make-instance 'radio-button :label "Collect" :group detal-button))
	   (specification-button (make-instance 'radio-button :label "Specification" :group detal-button))
	   (button-new (make-instance 'button :label "Make new"))
	   (button-cancel (make-instance 'button :label "Cancel")))
      (gobject:g-signal-connect window "destroy" (lambda (w) (declare (ignore w)) (leave-gtk-main)))
      (gobject:g-signal-connect button-cancel "clicked" (lambda (b) (declare (ignore b)) (object-destroy window)))
      (box-pack-start v-box notebook)
      (box-pack-start v-box h-box :expand nil)
      (notebook-add-page notebook
       new-vbox
       (make-instance 'label :label "New documents"))
      (notebook-add-page notebook
       (make-instance 'v-box)
       (make-instance 'label :label "Templates"))
      (box-pack-start new-vbox detal-button)
      (box-pack-start new-vbox collect-button)
      (box-pack-start new-vbox specification-button)
      (box-pack-start h-box button-new :expand nil)
      (box-pack-start h-box button-cancel :expand nil)
      (container-add window v-box)
      (widget-show window))))

;draw properties window
(defstruct units count)

(defun draw-properties-window ()
  (within-main-loop
   (let* ((window (make-instance 'gtk-window :title "Properties" :type :toplevel :window-position :center :default-width 600 :default-height 400 :destroy-with-parent t))
	 (v-box (make-instance 'v-box))
	 (h-box (make-instance 'h-box))
	 (notebook (make-instance 'notebook :enable-popup t :tab-pos :left))
	 (button-new (make-instance 'button :label "Save"))
	 (button-cancel (make-instance 'button :label "Cancel"))
	 (basic-vbox (make-instance 'v-box))
	 (basic-table (make-instance 'table :n-rows 7 :n-columns 2 :homogeneous nil))
	 (units-label (make-instance 'label :label "Default units"))
	 (model (make-instance 'array-list-store))
	 (combo-box (make-instance 'combo-box :model model))
	 (highlight (make-instance 'label :label "Highlight points"))
	 (highlight-check (make-instance 'check-button :label "Boxes are drawn around point obgects"))
	 (split (make-instance 'label :label "Autosplitting"))
	 (split-check (make-instance 'check-button :label "New points split existing entities"))
	 (drawing-area-color (make-instance 'label :label "Drawing area color"))
	 (button-drawing-area-color-selection (make-instance 'color-button :has-opacity-control t))
	 (dim-color (make-instance 'label :label "Dimension color"))
	 (button-dim-color-selection (make-instance 'color-button :has-opacity-control t))
	 (osnap-color (make-instance 'label :label "Osnap color"))
	 (button-osnap-color-selection (make-instance 'color-button :has-opacity-control t))
	 (point-color (make-instance 'label :label "Object points color"))
	 (button-point-color-selection (make-instance 'color-button :has-opacity-control t)))
     (store-add-column model "gchararray" #'units-count)
     (store-add-item model (make-units :count "Millimeters"))
     (store-add-item model (make-units :count "Micrometers"))
     (store-add-item model (make-units :count "Meters"))
     (store-add-item model (make-units :count "Kilometers"))
     (store-add-item model (make-units :count "Inches"))
     (store-add-item model (make-units :count "Feet"))
     (store-add-item model (make-units :count "Yard"))
     (store-add-item model (make-units :count "Miles"))
     (box-pack-start basic-vbox basic-table)
     (table-attach basic-table units-label 0 1 0 1)
     (table-attach basic-table combo-box 1 2 0 1)
     (table-attach basic-table highlight  0 1 1 2)
     (table-attach basic-table highlight-check 1 2 1 2)
     (table-attach basic-table split 0 1 2 3)
     (table-attach basic-table split-check 1 2 2 3)
     (table-attach basic-table drawing-area-color 0 1 3 4)
     (table-attach basic-table button-drawing-area-color-selection 1 2 3 4)
     (table-attach basic-table dim-color 0 1 4 5)
     (table-attach basic-table button-dim-color-selection 1 2 4 5)
     (table-attach basic-table osnap-color 0 1 5 6)
     (table-attach basic-table button-osnap-color-selection 1 2 5 6)
     (table-attach basic-table point-color 0 1 6 7)
     (table-attach basic-table button-point-color-selection 1 2 6 7)
     (box-pack-start v-box notebook)
     (box-pack-start v-box h-box :expand nil)
     (notebook-add-page notebook
			basic-vbox
			(make-instance 'label :label "Basic"))
     (notebook-add-page notebook
			(make-instance 'v-box)
			(make-instance 'label :label "New drawings"))
     (notebook-add-page notebook
			(make-instance 'v-box)
			(make-instance 'label :label "Current screen"))
     (notebook-add-page notebook
			(make-instance 'v-box)
			(make-instance 'label :label "Current draw"))
     (box-pack-start h-box button-new :expand nil)
     (box-pack-start h-box button-cancel :expand nil)
     (container-add window v-box)
     (let ((renderer (make-instance 'cell-renderer-text :text "A text")))
        (cell-layout-pack-start combo-box renderer :expand t)
        (cell-layout-add-attribute combo-box renderer "text" 0))
     (gobject:g-signal-connect window "destroy" (lambda (w) (declare (ignore w)) (leave-gtk-main)))
     (gobject:g-signal-connect button-cancel "clicked" (lambda (b) (declare (ignore b)) (object-destroy window)))
     (gobject:g-signal-connect combo-box "changed" (lambda (c)
                                              (declare (ignore c))
                                              (format t "You clicked on row ~A~%" (combo-box-active combo-box))))
     (gobject:g-signal-connect button-drawing-area-color-selection "color-changed" (lambda (s) (declare (ignore s)) 
											   (unless (color-selection-adjusting-p button-drawing-area-color-selection) 
											     (format t "color: ~A~%" (color-selection-current-color button-drawing-area-color-selection)))))
     (gobject:g-signal-connect button-dim-color-selection "color-changed" (lambda (s) (declare (ignore s)) 
										  (unless (color-selection-adjusting-p button-dim-color-selection) 
										    (format t "color: ~A~%" (color-selection-current-color button-dim-color-selection)))))
     (gobject:g-signal-connect button-osnap-color-selection "color-changed" (lambda (s) (declare (ignore s)) 
										    (unless (color-selection-adjusting-p button-osnap-color-selection) 
										      (format t "color: ~A~%" (color-selection-current-color button-osnap-color-selection)))))
     (gobject:g-signal-connect button-point-color-selection "color-changed" (lambda (s) (declare (ignore s)) 
										    (unless (color-selection-adjusting-p button-point-color-selection) 
										      (format t "color: ~A~%" (color-selection-current-color button-point-color-selection)))))
     (widget-show window))))

;layers-window
(defun layers-window ()
  (within-main-loop
    (let* ((window (make-instance 'gtk-window :type :toplevel :title "Layers" :destroy-with-parent t))
           (model (make-instance 'array-list-store))
           (scroll (make-instance 'scrolled-window :hscrollbar-policy :automatic :vscrollbar-policy :automatic))
           (tv (make-instance 'tree-view :headers-visible t :width-request 100 :height-request 300 :rules-hint t))
           (h-box (make-instance 'h-box))
           (v-box (make-instance 'v-box))
           (layer-name-entry (make-instance 'entry))
           (line-type-entry (make-instance 'entry))
	   (color-line-entry (make-instance 'entry))
	   (weight-entry (make-instance 'entry))
	   (printable-entry (make-instance 'entry))
	   (view-entry (make-instance 'entry))
           (button (make-instance 'button :label "Add layer")))
      (store-add-column model "gchararray" #'layer-layer-name)
      (store-add-column model "gchararray" #'layer-line-type)
      (store-add-column model "gchararray" #'layer-color-line)
      (store-add-column model "gint" #'layer-weight)
      (store-add-column model "gchararray" #'layer-printable)
      (store-add-column model "gchararray" #'layer-view)
      (store-add-item model (make-layer :layer-name "0" :line-type "continious" :color-line "black" :weight 1 :printable "yes" :view "yes"))
      (setf (tree-view-model tv) model (tree-view-tooltip-column tv) 0)
      (gobject:g-signal-connect window "destroy" (lambda (w) (declare (ignore w)) (leave-gtk-main)))
      (gobject:g-signal-connect button "clicked" (lambda (b)
                                                   (declare (ignore b))
                                                   (store-add-item model (make-layer :layer-name (entry-text layer-name-entry)
										     :line-type (entry-text line-type-entry)
										     :color-line (entry-text color-line-entry)
										     :weight (or (parse-integer (entry-text weight-entry) 
                                                                                                             :junk-allowed t)
                                                                                              0)
										    :printable (or (entry-text printable-entry) "yes")
										    :view (or (entry-text view-entry) "yes")))))
      (gobject:g-signal-connect tv "row-activated" (lambda (tv path column)
						     (declare (ignore tv column))
						     (format t "You clicked on row ~A~%" (tree-path-indices path))))
      (container-add window v-box)
      (box-pack-start v-box h-box :expand nil)
      (box-pack-start h-box layer-name-entry :expand nil)
      (box-pack-start h-box line-type-entry :expand nil)
      (box-pack-start h-box color-line-entry :expand nil)
      (box-pack-start h-box weight-entry :expand nil)
      (box-pack-start h-box printable-entry :expand nil)
      (box-pack-start h-box view-entry :expand nil)
      (box-pack-start h-box button :expand nil)
      (box-pack-start v-box scroll)
      (container-add scroll tv)
      (let ((column (make-instance 'tree-view-column :title "Name" :sort-column-id 0))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 0)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "Line type"))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 1)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "Color line"))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 2)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "Weight"))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 3)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "Printable"))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 4)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (let ((column (make-instance 'tree-view-column :title "View"))
            (renderer (make-instance 'cell-renderer-text :text "A text")))
        (tree-view-column-pack-start column renderer)
        (tree-view-column-add-attribute column renderer "text" 5)
        (tree-view-append-column tv column)
        (print (tree-view-column-tree-view column))
        (print (tree-view-column-cell-renderers column)))
      (widget-show window))))

;entry
(defun entry-window ()
  (within-main-loop
    (let ((window (make-instance 'gtk-window :type :toplevel :title "Entry" :window-position :center :destroy-with-parent t))
	  (vbox (make-instance 'v-box));
	  (hbox (make-instance 'h-box))
	  (entry (make-instance 'entry))
	  (button (make-instance 'button :label "OK")))
      (box-pack-start vbox hbox :expand nil)
      (box-pack-start hbox entry :expand t)
      (box-pack-start hbox button :expand nil)
      (container-add window vbox)
      (gobject:g-signal-connect window "destroy" (lambda (widget) (declare (ignore widget)) (leave-gtk-main)))
      (gobject:g-signal-connect button "clicked" (lambda (widget) (declare (ignore widget)) (object-destroy window)))
      (widget-show window))))

(defun osnap-window ()
  (within-main-loop
   (let ((window (make-instance 'gtk-window :type :toplevel :title "Osnap" :window-position :center :default-width 240 :default-height 320 :destroy-with-parent t))
	 (v-box (make-instance 'v-box))
	 (h-box (make-instance 'h-box))
	 (osnap-table (make-instance 'table :n-rows 10 :n-columns 2 :homogeneous nil))
	 (button-oscenter (make-instance 'check-button :label "Center" :active (if (equal *osnap-center* t) (print t) (print nil))))
	 (center-image (make-instance 'image :file (namestring (merge-pathnames "graphics/osnap/osnap_cen.svg" *src-location*))))
	 (button-osend (make-instance 'check-button :label "End" :active (if (equal *osnap-end* t) (print t) (print nil))))
	 (end-image (make-instance 'image :file (namestring (merge-pathnames "graphics/osnap/osnap_end.svg" *src-location*))))
	 (button-osins (make-instance 'check-button :label "Insert":active (if (equal *osnap-insert* t) (print t) (print nil)) ))
	 (ins-image (make-instance 'image :file (namestring (merge-pathnames "graphics/osnap/osnap_ins.svg" *src-location*))))
	 (button-osint (make-instance 'check-button :label "Intersection" :active (if (equal *osnap-intersection* t) (print t) (print nil))))
	 (int-image (make-instance 'image :file (namestring (merge-pathnames "graphics/osnap/osnap_int.svg" *src-location*))))
	 (button-osmid (make-instance 'check-button :label "Midle" :active (if (equal *osnap-midpoint* t) (print t) (print nil))))
	 (mid-image (make-instance 'image :file (namestring (merge-pathnames "graphics/osnap/osnap_mid.svg" *src-location*))))
	 (button-osnea (make-instance 'check-button :label "Nearest" :active (if (equal *osnap-nearest* t) (print t) (print nil))))
	 (nea-image (make-instance 'image :file (namestring (merge-pathnames "graphics/osnap/osnap_nea.svg" *src-location*))))
	 (button-osnod (make-instance 'check-button :label "Points" :active (if (equal *osnap-point* t) (print t) (print nil))))
	 (nod-image (make-instance 'image :file (namestring (merge-pathnames "graphics/osnap/osnap_nod.svg" *src-location*))))
	 (button-osper (make-instance 'check-button :label "Perpendicular" :active (if (equal *osnap-perpendicular* t) (print t) (print nil))))
	 (per-image (make-instance 'image :file (namestring (merge-pathnames "graphics/osnap/osnap_per.svg" *src-location*))))
	 (button-osqua (make-instance 'check-button :label "Quadrant" :active (if (equal *osnap-quadrant* t) (print t) (print nil))))
	 (qua-image (make-instance 'image :file (namestring (merge-pathnames "graphics/osnap/osnap_qua.svg" *src-location*))))
	 (button-ostan (make-instance 'check-button :label "Tangent" :active (if (equal *osnap-tangent* t) (print t) (print nil))))
	 (tan-image (make-instance 'image :file (namestring (merge-pathnames "graphics/osnap/osnap_tan.svg" *src-location*))))
	 (button-ostrack (make-instance 'check-button :label "Track" :active (if (equal *osnap-track* t) (print t) (print nil))))
	 (track-image (make-instance 'image :file (namestring (merge-pathnames "graphics/osnap/osnap_track.svg" *src-location*))))
	 (button-ok (make-instance 'button :label "OK")))
     (container-add window v-box)
     (container-add v-box osnap-table)
     (table-attach osnap-table button-oscenter 0 1 0 1)
     (table-attach osnap-table center-image 1 2 0 1)
     (table-attach osnap-table button-osend 0 1 1 2)
     (table-attach osnap-table end-image 1 2 1 2)
     (table-attach osnap-table button-osins 0 1 2 3)
     (table-attach osnap-table ins-image 1 2 2 3)
     (table-attach osnap-table button-osint 0 1 3 4)
     (table-attach osnap-table int-image 1 2 3 4)
     (table-attach osnap-table button-osmid 0 1 4 5)
     (table-attach osnap-table mid-image 1 2 4 5)
     (table-attach osnap-table button-osnea 0 1 5 6)
     (table-attach osnap-table nea-image 1 2 5 6)
     (table-attach osnap-table button-osnod 0 1 6 7)
     (table-attach osnap-table nod-image 1 2 6 7)
     (table-attach osnap-table button-osper 0 1 7 8)
     (table-attach osnap-table per-image 1 2 7 8)
     (table-attach osnap-table button-osqua 0 1 8 9)
     (table-attach osnap-table qua-image 1 2 8 9)
     (table-attach osnap-table button-ostan 0 1 9 10)
     (table-attach osnap-table tan-image 1 2 9 10)
     (table-attach osnap-table button-ostrack 0 1 10 11)
     (table-attach osnap-table track-image 1 2 10 11)
     (box-pack-start v-box h-box :expand nil)
     (box-pack-start h-box button-ok :expand nil)
     (gobject:g-signal-connect window "destroy" (lambda (widget) (declare (ignore widget)) (leave-gtk-main)))
     (gobject:g-signal-connect button-ok "clicked" (lambda (widget) (declare (ignore widget)) (object-destroy window)))
     (gobject:g-signal-connect button-oscenter "clicked" (lambda (a) (declare (ignore a)) (if (equal *osnap-center* t) (setf *osnap-center* nil) (setf *osnap-center* t))))
     (gobject:g-signal-connect button-osend "clicked" (lambda (a) (declare (ignore a)) (if (equal *osnap-end* t) (setf *osnap-end* nil) (setf *osnap-end* t))))
     (gobject:g-signal-connect button-osins "clicked" (lambda (a) (declare (ignore a)) (if (equal *osnap-insert* t) (setf *osnap-insert* nil) (setf *osnap-insert* t))))
     (gobject:g-signal-connect button-osint "clicked" (lambda (a) (declare (ignore a)) (if (equal *osnap-intersection* t) (setf *osnap-intersection* nil) (setf *osnap-intersection* t))))
     (gobject:g-signal-connect button-osmid "clicked" (lambda (a) (declare (ignore a)) (if (equal *osnap-midpoint* t) (setf *osnap-midpoint* nil) (setf *osnap-midpoint* t))))
     (gobject:g-signal-connect button-osnea "clicked" (lambda (a) (declare (ignore a)) (if (equal *osnap-nearest* t) (setf *osnap-nearest* nil) (setf *osnap-nearest* t))))
     (gobject:g-signal-connect button-osnod "clicked" (lambda (a) (declare (ignore a)) (if (equal *osnap-point* t) (setf *osnap-point* nil) (setf *osnap-point* t))))
     (gobject:g-signal-connect button-osper "clicked" (lambda (a) (declare (ignore a)) (if (equal *osnap-perpendicular* t) (setf *osnap-perpendicular* nil) (setf *osnap-perpendicular* t))))
     (gobject:g-signal-connect button-osqua "clicked" (lambda (a) (declare (ignore a)) (if (equal *osnap-quadrant* t) (setf *osnap-quadrant* nil) (setf *osnap-quadrant* t))))
     (gobject:g-signal-connect button-ostan "clicked" (lambda (a) (declare (ignore a)) (if (equal *osnap-tangent* t) (setf *osnap-tangent* nil) (setf *osnap-tangent* t))))
     (gobject:g-signal-connect button-ostrack "clicked" (lambda (a) (declare (ignore a)) (if (equal *osnap-track* t) (setf *osnap-track* nil) (setf *osnap-track* t))))
     (widget-show window))))

(defun about-window ()
  (within-main-loop
   (let ((d (make-instance 'about-dialog
			   :program-name "CL-CAD"
			   :version "0.1"
			   :comments "Simple CAD program powered by Common-Lisp"
			   :authors '("Burdukov Denis <litetabs@gmail.com>")
			   :license "LLGPL"
			   :website "http://cl-cad.blogspot.com")))
     (dialog-run d)
     (object-destroy d))))

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defclass cairo-w (drawing-area)
    ((draw-fn :initform 'draw-space :accessor cairo-w-draw-fn))
    (:metaclass gobject:gobject-class)))

(defmethod initialize-instance :after ((w cairo-w) &rest initargs)
  (declare (ignore initargs))
  (gobject:connect-signal w "configure-event" (lambda (widget event)
                                                (declare (ignore event))
                                                (widget-queue-draw widget)))
  (gobject:connect-signal w "expose-event" (lambda (widget event)
                                             (declare (ignore event))
                                             (cc-expose widget)))
  (gobject:connect-signal w "motion-notify-event" (lambda (widget event)
                                                       (declare (ignore widget))
                                                       (setf x (event-motion-x event)
                                                             y (event-motion-y event))
                                                       (widget-queue-draw window))))

(defmethod (setf cairo-w-draw-fn) :after (new-value (w cairo-w))
  (declare (ignore new-value))
  (widget-queue-draw w))

(defun cc-expose (widget)
  (multiple-value-bind (w h) (gdk:drawable-get-size (widget-window widget))
    (with-gdk-context (ctx (widget-window widget))
      (with-context (ctx)
	(funcall (cairo-w-draw-fn widget) w h)
        nil))))

;	(set-source-rgb 0 0 0)
;	(paint)
 ;       (move-to 200 10)
;	(line-to 100 10)
;	(line-to 100 400)
;	(line-to 700 400)
;	(line-to 700 10)
;	(line-to 300 10)
;	(set-source-rgb 0.2 0.2 1)
;	(set-line-width 4)
;	(stroke)
;	(rectangle 110 50 105 345)
;	(set-source-rgb 1 1 1)
;	(fill-path)
;	(rectangle 420 15 150 50)
;	(set-source-rgb 1 1 1)
;	(fill-path)
;	(rectangle 320 15 80 80)
;	(set-source-rgb 1 1 1)
;	(fill-path)
;	(rectangle 500 300 195 95)
;	(set-source-rgb 1 1 0.5)
;	(fill-path)
;	(rectangle 600 100 95 295)
;	(set-source-rgb 1 1 0.5)
;	(fill-path)

;main window
(defun main-window ()
  (within-main-loop
   (let* ((w (make-instance 'gtk-window :title "CL-CAD" :type :toplevel :window-position :center :default-width 1024 :default-height 600))
	 (v-box (make-instance 'v-box))
	 (h-box (make-instance 'h-box))
	 (menu-notebook (make-instance 'notebook :enable-popup t))
	 (draw-area (make-instance 'cairo-w))
	 (vpaned (make-instance 'v-paned))
	 (statusbar (make-instance 'statusbar :has-resize-grip t))
	 (toolbar (make-instance 'toolbar :show-arrow t :toolbar-style :icons :tooltips t))
	 (menubar (make-instance 'menu-bar))
	 (menuitem-file (make-instance 'menu-item :label "File"))
	 (menuitem-edit (make-instance 'menu-item :label "Edit"))
	 (menuitem-view (make-instance 'menu-item :label "View"))
	 (menuitem-about (make-instance 'menu-item :label "About"))
	 ;terminal
	 (term-notebook (make-instance 'notebook :enable-popup t :tab-pos :left))
	 (term-vbox (make-instance 'v-box))
	 (term-hbox (make-instance 'h-box))
	 (tools-vbox (make-instance 'v-box))
	 (term-buffer (make-instance 'text-buffer))
	 (term-text-view (make-instance 'text-view :buffer term-buffer))
	 (term-new (make-instance 'button :image (make-instance 'image :stock "gtk-new")))
	 (term-open (make-instance 'button :image (make-instance 'image :stock "gtk-open")))
	 (term-save (make-instance 'button :image (make-instance 'image :stock "gtk-save")))
	 (term-save-as (make-instance 'button :image (make-instance 'image :stock "gtk-save-as")))
	 (term-eval (make-instance 'button :image (make-instance 'image :stock "gtk-execute")))
	 (term-scrolled (make-instance 'scrolled-window :hscrollbar-policy :automatic :vscrollbar-policy :automatic))
         ;;;system
	 (button-save (make-instance 'button :image (make-instance 'image :stock "gtk-save")))
	 (button-save-as (make-instance 'button :image (make-instance 'image :stock "gtk-save-as")))
	 (button-new (make-instance 'button :image (make-instance 'image :stock "gtk-new")))
	 (button-open (make-instance 'button :image (make-instance 'image :stock "gtk-open")))
	 (button-print (make-instance 'button :image (make-instance 'image :stock "gtk-print")))
	 (button-print-prop (make-instance 'button :image (make-instance 'image :stock "gtk-page-setup")))
	 (button-system-properties (make-instance 'button :image (make-instance 'image :stock "gtk-properties")))
	 (button-layers (make-instance 'button :image (make-instance 'image :stock "gtk-justify-fill")))
	 (button-file-prop (make-instance 'button :image (make-instance 'image :stock "gtk-preferences")))
	 (button-color-selection (make-instance 'color-button :has-opacity-control t))
	 (button-select-font (make-instance 'font-button :font-name "Sans 10"))
	 (button-full (make-instance 'toggle-button :image (make-instance 'image :stock "gtk-fullscreen")))
	 (button-osnap (make-instance 'button :label "Osnap"))
         ;;;primitives
	 (primitives-expander (make-instance 'expander :expanded t :label "Primitives"))
	 (primitives-table (make-instance 'table :n-rows 5 :n-columns 4 :homogeneous nil))
	 (button-line (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/line.svg" *src-location*)))))
	 (button-ray (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/ray.svg" *src-location*)))))
	 (button-construction (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/construction.svg" *src-location*)))))
	 (button-circle-radius (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/circleradius.svg" *src-location*)))))
	 (button-circle-2p (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/circle2p.svg" *src-location*)))))
	 (button-circle-3p (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/circle3p.svg" *src-location*)))))
	 (button-circle-diameter (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/circlediameter.svg" *src-location*)))))
	 (button-circle-ttr (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/circlettr.svg" *src-location*)))))
	 (button-circle-ttt (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/circlettt.svg" *src-location*)))))
	 (button-arc (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/arc3p.svg" *src-location*)))))
	 (button-ellipse-center (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/ellipsecenter.svg" *src-location*)))))
	 (button-ellipse-axis (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/ellipseaxis.svg" *src-location*)))))
	 (button-ellipse-arc (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/ellipsearc.svg" *src-location*)))))
	 (button-pline (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/pline.svg" *src-location*)))))
	 (button-polygon (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/polygon.svg" *src-location*)))))
	 (button-point (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/point.svg" *src-location*)))))
	 (button-rectangle (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/rectangle.svg" *src-location*)))))
	 (button-spline (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/spline.svg" *src-location*)))))
	 (button-text (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/objects/text.svg" *src-location*)))))
         ;;;modify
	 (modify-expander (make-instance 'expander :expanded t :label "Modify"))
	 (modify-table (make-instance 'table :n-rows 3 :n-columns 4 :homogeneous nil))
	 (button-break (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/modify/mod_break.svg" *src-location*)))))
	 (button-erase (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/modify/mod_erase.svg" *src-location*)))))
	 (button-explode (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/modify/mod_explode.svg" *src-location*)))))
	 (button-extend (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/modify/mod_extend.svg" *src-location*)))))
	 (button-lengthen (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/modify/mod_lengthen.svg" *src-location*)))))
	 (button-move (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/modify/mod_move.svg" *src-location*)))))
	 (button-rotate (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/modify/mod_rotate.svg" *src-location*)))))
	 (button-scale (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/modify/mod_scale.svg" *src-location*)))))
	 (button-stretch (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/modify/mod_stretch.svg" *src-location*)))))
	 (button-trim (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/modify/mod_trim.svg" *src-location*)))))
         ;;;dimension
	 (dimension-expander (make-instance 'expander :expanded t :label "Dimension"))
	 (dimension-table (make-instance 'table :n-rows 3 :n-columns 4 :homogeneous nil))
	 (button-align (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/dimension/dimalign.svg" *src-location*)))))
	 (button-angular (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/dimension/dimangular.svg" *src-location*)))))
	 (button-baseline (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/dimension/dimbaseline.svg" *src-location*)))))
	 (button-center (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/dimension/dimcenter.svg" *src-location*)))))
	 (button-continue (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/dimension/dimcontinue.svg" *src-location*)))))
	 (button-diameter (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/dimension/dimdiameter.svg" *src-location*)))))
	 (button-horiz (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/dimension/dimhoriz.svg" *src-location*)))))
	 (button-leader (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/dimension/dimleader.svg" *src-location*)))))
	 (button-vert (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/dimension/dimvert.svg" *src-location*)))))
	 ;;;construct
	 (construct-expander (make-instance 'expander :expanded t :label "Construct"))
	 (construct-table (make-instance 'table :n-rows 2 :n-columns 4 :homogeneous nil))
	 (button-array-polar (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/construct/cons_array_polar.svg" *src-location*)))))
	 (button-array-rect (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/construct/cons_array_rect.svg" *src-location*)))))
	 (button-chamfer (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/construct/cons_chamfer.svg" *src-location*)))))
	 (button-copy (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/construct/cons_copy.svg" *src-location*)))))
	 (button-fillet (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/construct/cons_fillet.svg" *src-location*)))))
	 (button-mirror (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/construct/cons_mirror.svg" *src-location*)))))
	 (button-offset (make-instance 'button :image (make-instance 'image :file (namestring (merge-pathnames "graphics/construct/cons_offset.svg" *src-location*)))))
	 (full-window 0)
	 (term-file-name nil)
	  x y)
     ;;;pack
     (container-add w v-box)
     (box-pack-start v-box menubar :expand nil)
     (container-add menubar menuitem-file)
     (container-add menubar menuitem-edit)
     (container-add menubar menuitem-view)
     (container-add menubar menuitem-about)
     (box-pack-start v-box toolbar :expand nil)
     (container-add v-box vpaned)
     (box-pack-start v-box statusbar :expand nil)
     (container-add vpaned h-box)
     (box-pack-start h-box menu-notebook :expand nil)
     (box-pack-start h-box draw-area :expand t)
     (container-add vpaned term-notebook)
     (box-pack-start term-vbox term-hbox :expand nil)
     (container-add term-vbox term-scrolled)
     (container-add term-scrolled term-text-view)
     (box-pack-start term-hbox term-new :expand nil)
     (box-pack-start term-hbox term-open :expand nil)
     (box-pack-start term-hbox term-save :expand nil)
     (box-pack-start term-hbox term-save-as :expand nil)
     (box-pack-start term-hbox term-eval :expand nil)
     (notebook-add-page menu-notebook
			tools-vbox
			(make-instance 'label :label "Tools"))
     (notebook-add-page menu-notebook
			(make-instance 'v-box)
			(make-instance 'label :label "Files"))
     (notebook-add-page menu-notebook
			(make-instance 'v-box)
			(make-instance 'label :label "Statistic"))
     (notebook-add-page term-notebook 
			term-vbox
			(make-instance 'label :label "Terminal"))
     (notebook-add-page term-notebook
			(make-instance 'v-box)
			(make-instance 'label :label "Palettes"))
     ;system 
     (container-add toolbar  button-save)
     (container-add toolbar button-save-as)
     (container-add toolbar button-new)
     (container-add toolbar button-open)
     (container-add toolbar button-print)
     (container-add toolbar button-print-prop)
     (container-add toolbar button-file-prop)
     (container-add toolbar button-layers)
     (container-add toolbar button-system-properties)
     (container-add toolbar button-color-selection)
     (container-add toolbar button-select-font)
     (container-add toolbar button-full)
     (container-add toolbar button-osnap)
     ;primitives
     (box-pack-start tools-vbox primitives-expander :expand nil)
     (container-add primitives-expander primitives-table)
     (table-attach primitives-table button-line 0 1 0 1)
     (table-attach primitives-table button-ray 1 2 0 1)
     (table-attach primitives-table button-construction 2 3 0 1)
     (table-attach primitives-table button-circle-radius 3 4 0 1)
     (table-attach primitives-table button-circle-2p 0 1 1 2)
     (table-attach primitives-table button-circle-3p 1 2 1 2)
     (table-attach primitives-table button-circle-diameter 2 3 1 2)
     (table-attach primitives-table button-circle-ttr 3 4 1 2)
     (table-attach primitives-table button-circle-ttt 0 1 2 3)
     (table-attach primitives-table button-arc 1 2 2 3)
     (table-attach primitives-table button-ellipse-center 2 3 2 3)
     (table-attach primitives-table button-ellipse-axis 3 4 2 3)
     (table-attach primitives-table button-ellipse-arc 0 1 3 4)
     (table-attach primitives-table button-pline 1 2 3 4)
     (table-attach primitives-table button-polygon 2 3 3 4)
     (table-attach primitives-table button-point 3 4 3 4)
     (table-attach primitives-table button-rectangle 0 1 4 5)
     (table-attach primitives-table button-spline 1 2 4 5)
     (table-attach primitives-table button-text 2 3 4 5)
     ;modify
     (box-pack-start tools-vbox modify-expander :expand nil)
     (container-add modify-expander modify-table)
     (table-attach modify-table button-break 0 1 0 1)
     (table-attach modify-table button-erase 1 2 0 1)
     (table-attach modify-table button-explode 2 3 0 1)
     (table-attach modify-table button-extend 3 4 0 1)
     (table-attach modify-table button-lengthen 0 1 1 2)
     (table-attach modify-table button-move 1 2 1 2)
     (table-attach modify-table button-rotate 2 3 1 2)
     (table-attach modify-table button-scale 3 4 1 2)
     (table-attach modify-table button-stretch 0 1 2 3)
     (table-attach modify-table button-trim 1 2 2 3)
     ;dimension
     (box-pack-start tools-vbox dimension-expander :expand nil)
     (container-add dimension-expander dimension-table)
     (table-attach dimension-table button-align 0 1 0 1)
     (table-attach dimension-table button-angular 1 2 0 1)
     (table-attach dimension-table button-baseline 2 3 0 1)
     (table-attach dimension-table button-center 3 4 0 1)
     (table-attach dimension-table button-continue 0 1 1 2)
     (table-attach dimension-table button-diameter 1 2 1 2)
     (table-attach dimension-table button-horiz 2 3 1 2)
     (table-attach dimension-table button-leader 3 4 1 2)
     (table-attach dimension-table button-vert 0 1 2 3)
     ;construct
     (box-pack-start tools-vbox construct-expander :expand nil)
     (container-add construct-expander construct-table)
     (table-attach construct-table button-array-polar 0 1 0 1)
     (table-attach construct-table button-array-rect 1 2 0 1)
     (table-attach construct-table button-chamfer 2 3 0 1)
     (table-attach construct-table button-copy 3 4 0 1)
     (table-attach construct-table button-fillet 0 1 1 2)
     (table-attach construct-table button-mirror 1 2 1 2)
     (table-attach construct-table button-offset 2 3 1 2)
     ;;;g-signals
     (gobject:g-signal-connect w "destroy" (lambda (b) (declare (ignore b)) (leave-gtk-main)))
     (gobject:g-signal-connect w "delete-event" (lambda (widget event)
					  (declare (ignore widget event))
					  (let ((dlg (make-instance 'message-dialog
								    :text "Are you sure?"
								    :buttons :yes-no)))
					    (let ((response (dialog-run dlg)))
					      (object-destroy dlg)
					      (not (eq :yes response))))))
     (gobject:g-signal-connect button-save "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-save-as "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-new "clicked" (lambda (w) (declare (ignore w)) (make-new-file-window)))
     (gobject:g-signal-connect button-open "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
;     (gobject:g-signal-connect button-print "clicked"
     (gobject:g-signal-connect button-print-prop "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-file-prop "clicked" (lambda (w) (declare (ignore w)) (file-properties-window)))
     (gobject:g-signal-connect button-color-selection "color-changed" (lambda (s) (declare (ignore s)) 
									      (unless (color-selection-adjusting-p button-color-selection) 
										(format t "color: ~A~%" (color-selection-current-color button-color-selection)))))
     (gobject:g-signal-connect button-select-font "font-set" (lambda (b) (declare (ignore b)) 
								     (format t "Chose font ~A~%" (font-button-font-name button-select-font))))
     (gobject:g-signal-connect button-system-properties "clicked" (lambda (w) (declare (ignore w)) (draw-properties-window)))
     (gobject:g-signal-connect button-layers "clicked" (lambda (w) (declare (ignore w)) (layers-window)))
     (gobject:g-signal-connect button-full "toggled" (lambda (b) (declare (ignore b))
							     (if (evenp full-window) (gtk-window-fullscreen w) (gtk-window-unfullscreen w))
							     (incf full-window)))
     (gobject:g-signal-connect button-osnap "clicked" (lambda (b) (declare (ignore b)) (osnap-window)))
  ;   (gobject:g-signal-connect button-line "clicked" (lambda (widget) (declare (ignore widget))
;							     (setf (cairo-w-draw-fn draw-area)
;								   (draw-line))))
     (gobject:g-signal-connect button-ray "clicked" (lambda (w) (declare (ignore w)) 
							    (coming-soon-window)))
     (gobject:g-signal-connect button-construction "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-circle-radius "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-circle-2p "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-circle-3p "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-circle-diameter "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-circle-ttr "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-circle-ttt "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-arc "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-ellipse-center "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-ellipse-axis "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-ellipse-arc "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-pline "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-polygon "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-point "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-rectangle "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-spline "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-text "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-break "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-erase "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-explode "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-extend "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-lengthen "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-move "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-rotate "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-scale "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-stretch "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-trim "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-align "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-angular "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-baseline "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-center "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-continue "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-diameter "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-horiz "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-leader "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect button-vert "clicked" (lambda (w) (declare (ignore w)) (coming-soon-window)))
     (gobject:g-signal-connect term-new "clicked" (lambda (&rest args) (declare (ignore args)) 
							  (setf term-file-name nil
								(text-buffer-text (text-view-buffer term-text-view)) "")))
     (gobject:g-signal-connect term-save "clicked" (lambda (&rest args) (declare (ignore args)) 
							   (if term-file-name
							       (progn
								 (with-open-file (file term-file-name :direction :output :if-exists :supersede)
								   (write-string (text-buffer-text (text-view-buffer term-text-view)) file))))))
     (gobject:g-signal-connect term-save-as "clicked" (lambda (&rest args) (declare (ignore args)) 
							      (let ((d (make-instance 'file-chooser-dialog :action :save :title "Save file")))
								(when term-file-name (setf (file-chooser-filename d) term-file-name))
								(dialog-add-button d "gtk-save" :accept)
								(dialog-add-button d "gtk-cancel" :cancel)
								(if (eq :accept (dialog-run d))
								    (progn
								      (setf term-file-name (file-chooser-filename d))
								      (object-destroy d))
								    (object-destroy d)))))
     (gobject:g-signal-connect term-open "clicked" (lambda (&rest args) (declare (ignore args)) 
							   (let ((d (make-instance 'file-chooser-dialog :action :open :title "Open file")))
							     (when term-file-name (setf (file-chooser-filename d) term-file-name))
							     (dialog-add-button d "gtk-open" :accept)
							     (dialog-add-button d "gtk-cancel" :cancel)
							     (when (eq :accept (dialog-run d))
							       (setf term-file-name (file-chooser-filename d)
								     (text-buffer-text (text-view-buffer term-text-view)) (read-text-file term-file-name)))
							     (object-destroy d))))
     (gobject:g-signal-connect term-eval "clicked" (lambda (&rest args) (declare (ignore args)) 
							   (let ((buffer (text-view-buffer term-text-view)))
							     (multiple-value-bind (i1 i2) (text-buffer-get-selection-bounds buffer)
							       (when (and i1 i2)
								 (with-gtk-message-error-handler
								   (let* ((text (text-buffer-slice buffer i1 i2))
									  (value (eval (read-from-string text)))
									  (value-str (format nil "~A" value))
									  (pos (max (text-iter-offset i1) (text-iter-offset i2))))
								     (text-buffer-insert buffer " => " :position (text-buffer-get-iter-at-offset buffer pos))
								     (incf pos (length " => "))
								     (text-buffer-insert buffer value-str :position (text-buffer-get-iter-at-offset buffer pos)))))))))
     (widget-show w))))

(defun run ()
  (main-window)
  (join-main-thread))

(defun draw-space1 (w h)
  (set-source-rgb 1 1 1)
  (paint)
  (move-to (- w 320) (- h 50))
  (set-font-size 50)
  (set-source-rgb 0 0 1)
  (show-text "CL-CAD v0.1"))

(defun heart (alpha)
  "Draw a heart with fixed size and the given transparency alpha.
  Heart is upside down."
  (let ((radius (sqrt 0.5)))
    (move-to 0 -2)
    (line-to 1 -1)
    (arc 0.5 -0.5 radius (deg-to-rad -45) (deg-to-rad 135))
    (arc -0.5 -0.5 radius (deg-to-rad 45) (deg-to-rad 215))
    (close-path)
    (set-source-rgba 1 0 0 alpha)
    (fill-path)))

(defvar *heart-max-angle* 40d0)

(defun draw-space (w h)
  "Draw a lot of hearts"
  (rectangle 0 0 w h)
  (set-source-rgb 1 1 1)
  (fill-path)

  (dotimes (i 20)
    (let ((scaling (+ 5d0 (random 40d0))))
      (reset-trans-matrix)              ; reset matrix
      (translate (random w) (random h)) ; move the origin
      (scale scaling scaling)           ; scale
      (rotate (deg-to-rad (- (random (* 2 *heart-max-angle*))
                             *heart-max-angle* 180))) ; rotate
      (heart (+ 0.1 (random 0.7))))))