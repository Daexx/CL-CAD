(in-package :cl-cad)

(defun dash-gen (cd)
  (cond
    ((equal (getf cd :line-type) :continious) nil)
    ((equal (getf cd :line-type) :dashed) (set-dash 0 '(8 6)))
    ((equal (getf cd :line-type) :dashed-small) (set-dash 0 '(4 2)))
    ((equal (getf cd :line-type) :dashed-big) (set-dash 0 '(12 10)))
    ((equal (getf cd :line-type) :dot) (set-dash 0 '(1 6)))
    ((equal (getf cd :line-type) :dot-small) (set-dash 0 '(1 2)))
    ((equal (getf cd :line-type) :dot-big) (set-dash 0 '(1 10)))
    ))
    

(defun parser-line (cd)
  (save)
  (set-source-rgb 1 1 1)
  (set-line-width (getf cd :weight))
  (dash-gen cd)
  (move-to (* *scroll-units* (getf cd :x1)) 
	   (* *scroll-units* (getf cd :y1)))
  (line-to (* *scroll-units* (getf cd :x2)) 
	   (* *scroll-units* (getf cd :y2)))
  (stroke)
  (restore))

(defun parser-circle (cd)
  (save)
  (set-source-rgb 1 1 1)
  (set-line-width (getf cd :weight))
  (dash-gen cd)
  (arc (* *scroll-units* (getf cd :x1))
       (* *scroll-units* (getf cd :y1))
       (* *scroll-units* (getf cd :radius))
       0 (* 2 pi))
  (stroke)
  (restore))
  
(defun parser-arc (cd)
  (save)
  (set-source-rgb 1 1 1)
  (set-line-width (getf cd :weight))
  (dash-gen cd)
  (arc (* *scroll-units* (getf cd :x1))
       (* *scroll-units* (getf cd :y1)) 
       (* *scroll-units* (getf cd :radius)) 
       (deg-to-rad (getf cd :startangle)) 
       (deg-to-rad (getf cd :endangle)))
  (stroke)
  (restore))

(defvar *temp-x* nil)

(defun parser-continious (cd w h)
  (set-source-rgb 0 0 1)
  (set-line-width 1)
  (move-to (* *scroll-units* (let ((x1 (getf cd :x1))
				   (y1 (getf cd :y1))
				   (x2 (getf cd :x2))
				   (y2 (getf cd :y2)))
			       (setf *temp-x* (+ 
					(* (- 0 y1) 
					   (/ (- x2 x1) 
					      (- y2 y1)))
					x1))
			       *temp-x*))
	   (* *scroll-units* (let ((x1 (getf cd :x1))
				   (y1 (getf cd :y1))
				   (x2 (getf cd :x2))
				   (y2 (getf cd :y2)))
			       (* (/ (- y2 y1)
				     (- x2 x1))
				  (- *temp-x* x1)))))
  (line-to (* (/ (getf cd :x1) *scroll-units*) 
	      (let ((x1 (getf cd :x1))
		    (y1 (getf cd :y1))
		    (x2 (getf cd :x2))
		    (y2 (getf cd :y2)))
		(+ 
		 (* (- w y1) 
		    (/ (- x2 x1) 
		       (- y2 y1)))
		 x1)))
	   (* (/ (getf cd :y1) *scroll-units*) 
	      (let ((x1 (getf cd :x1))
		    (y1 (getf cd :y1))
		    (x2 (getf cd :x2))
		    (y2 (getf cd :y2)))
		(* (/ (- y2 y1)
		      (- x2 x1))
		   (- h x1)))))
  (stroke))

(defun parser-ray (cd w h)
  (set-source-rgb 0 0 1)
  (set-line-width 1)
  (move-to (* *scroll-units* (getf cd :x1))
	   (* *scroll-units* (getf cd :y1)))
  (line-to (* (/ (getf cd :x1) *scroll-units*) 
	      (let ((x1 (getf cd :x1))
		    (y1 (getf cd :y1))
		    (x2 (getf cd :x2))
		    (y2 (getf cd :y2)))
		(+ 
		 (* (- w y1) 
		    (/ (- x2 x1) 
		       (- y2 y1)))
		 x1)))
	   (* (/ (getf cd :y1) *scroll-units*) 
	      (let ((x1 (getf cd :x1))
		    (y1 (getf cd :y1))
		    (x2 (getf cd :x2))
		    (y2 (getf cd :y2)))
		(* (/ (- y2 y1)
		      (- x2 x1))
		   (- h x1)))))
  (stroke))


(defun parser-text (cd)
  (set-source-rgb 0 0 0)
  (move-to (* *scroll-units* (getf cd :x1))
	   (* *scroll-units* (getf cd :y1)))
  (set-font-size (* *scroll-units* (getf cd :height)))
  (select-font-face (getf cd :style) :normal :normal)
  (show-text (getf cd :count))
  (stroke))

;(defun parser-block ()

(defun parser-point (cd)
  (save)
  (set-source-rgb 1 0 1)
  (rectangle (- (* *scroll-units* (getf cd :x1)) 0.5)
	     (- (* *scroll-units* (getf cd :y1)) 0.5)
	     1 1)
  (fill-path)
  (restore))

(defun parser-ellipse (cd w h)
  (save)
 ; (scale 2 1)
 ; (rotate (deg-to-rad (getf cd :angle)))
  (dash-gen cd)
  (arc (* *scroll-units* (getf cd :x1))
       (* *scroll-units* (getf cd :y1))
       (* *scroll-units* (getf cd :major-radius))
       0 (* 2 pi))
  (set-source-rgb 1 0 0)
  (set-line-width (getf cd :weight))
  (stroke)
  (restore))
  
(defun parser-raster-image (cd)
  (save)
  (let* ((image (image-surface-create-from-png (getf cd :path)))
	 (image-width (image-surface-get-width image))
	 (image-height (image-surface-get-height image)))
    (set-source-surface image 
			(* *scroll-units* (getf cd :x1)) 
			(* *scroll-units* (getf cd :y1)))
    (paint)))

(defun parser (w h)
  (dolist (cd *current-draw*)
	     (cond
	       ((equal (getf cd :title) :line) (parser-line cd))
	       ((equal (getf cd :title) :circle) (parser-circle cd))
	       ((equal (getf cd :title) :arc) (parser-arc cd))
	       ((equal (getf cd :title) :continious) (parser-continious cd w h))
	       ((equal (getf cd :title) :ray) (parser-ray cd w h))
	       ((equal (getf cd :title) :text) (parser-text cd))
	       ((equal (getf cd :title) :point) (parser-point cd))
	       ((equal (getf cd :title) :ellipse) (parser-ellipse cd w h))
	       ((equal (getf cd :title) :raster-image) (parser-raster-image cd))
	       )))
